"""Add map locations to lotes

Revision ID: dcf750fbf427
Revises: 81b2eac232ea
Create Date: 2024-12-03 02:43:12.918105

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'dcf750fbf427'
down_revision = '81b2eac232ea'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # SQLite-specific migration strategy
    
    # Create map_images table
    op.execute('''
        CREATE TABLE IF NOT EXISTS map_images (
            id INTEGER PRIMARY KEY, 
            filename VARCHAR(255) NOT NULL, 
            upload_date DATETIME NOT NULL, 
            is_active BOOLEAN
        )
    ''')
    
    # Rename the existing map_locations table
    op.execute('ALTER TABLE map_locations RENAME TO _map_locations_old')
    
    # Create new map_locations table with updated schema
    op.execute('''
        CREATE TABLE map_locations (
            id INTEGER PRIMARY KEY,
            lot_id INTEGER NOT NULL,
            map_image_id INTEGER NOT NULL,
            x_coordinate FLOAT NOT NULL,
            y_coordinate FLOAT NOT NULL,
            status VARCHAR(20) NOT NULL,
            FOREIGN KEY(lot_id) REFERENCES lotes(id) ON DELETE CASCADE,
            FOREIGN KEY(map_image_id) REFERENCES map_images(id)
        )
    ''')
    
    # Copy data from old table to new table
    op.execute('''
        INSERT INTO map_locations (lot_id, map_image_id, x_coordinate, y_coordinate, status) 
        SELECT lot_id, 1, 0.0, 0.0, 'LIBRE' 
        FROM _map_locations_old
    ''')
    
    # Drop the old table
    op.execute('DROP TABLE _map_locations_old')

def downgrade():
    # Reverse the migration
    # Rename the existing map_locations table
    op.execute('ALTER TABLE map_locations RENAME TO _map_locations_new')
    
    # Recreate the old table structure
    op.execute('''
        CREATE TABLE map_locations (
            id INTEGER PRIMARY KEY,
            lot_id INTEGER NOT NULL,
            description VARCHAR(255),
            latitude FLOAT NOT NULL,
            longitude FLOAT NOT NULL,
            FOREIGN KEY(lot_id) REFERENCES lotes(id)
        )
    ''')
    
    # Copy data back
    op.execute('''
        INSERT INTO map_locations (lot_id, description, latitude, longitude) 
        SELECT lot_id, '', 0.0, 0.0 
        FROM _map_locations_new
    ''')
    
    # Drop the new table
    op.execute('DROP TABLE _map_locations_new')
    
    # Drop the map_images table
    op.execute('DROP TABLE IF EXISTS map_images')
